name: Deploy to AWS

on:
  push:
    branches:
      - "main"

env:
  AWS_REGION: ap-south-1
  AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY }}
  AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
  PRIVATE_SSH_KEY: ${{ secrets.AWS_SSH_KEY }}
  SERVER_PUBLIC_IP: ${{ secrets.AWS_PUBLIC_KEY }}

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Login to AWS ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Build and Push Docker image to ECR
        run: |
          REPO="devopsrepo"
          IMAGE_TAG=${{ github.sha }}
          REGISTRY=${{ steps.login-ecr.outputs.registry }}

          echo "Pushing to: $REGISTRY/$REPO:$IMAGE_TAG"
          docker build -t $REGISTRY/$REPO:$IMAGE_TAG .
          docker push $REGISTRY/$REPO:$IMAGE_TAG

      - name: Deploy Docker container on EC2
        uses: appleboy/ssh-action@master
        with:
          host: ${{ env.SERVER_PUBLIC_IP }}
          username: ubuntu
          key: ${{ env.PRIVATE_SSH_KEY }}
          script: |
            REPO="devopsrepo"
            IMAGE_TAG=${{ github.sha }}
            REGION="ap-south-1"
            REGISTRY="${{ steps.login-ecr.outputs.registry }}"

            echo "Pulling Docker image: $REGISTRY/$REPO:$IMAGE_TAG"

            # Install Docker & AWS CLI if not present
            command -v docker || sudo apt install -y docker.io
            command -v aws || sudo apt install -y awscli

            # Login to ECR
            aws ecr get-login-password --region $REGION | sudo docker login --username AWS --password-stdin $REGISTRY

            # Stop previous container if running
            sudo docker stop myappcontainer || true
            sudo docker rm myappcontainer || true

            # Pull and run the new container
            sudo docker pull $REGISTRY/$REPO:$IMAGE_TAG
            sudo docker run -d --name myappcontainer -p 80:80 $REGISTRY/$REPO:$IMAGE_TAG
